---
title: Signal Detection Theory and GLM
institute: "\\@event | Place"
author: 
  - name: "Filippo Gambarota"
    email: filippo.gambarota@unipd.it
    github: filippogambarota
format: 
  quarto-slides-revealjs:
    slide-number: true
    incremental: false
    code-link: true
    code-line-numbers: false
    html-math-method: mathjax
    margin: 0
    filters:
      - nutshell
      - code-fullscreen
from: markdown+emoji
date: last-modified
final-slide: true
df-print: default
bibliography: "`r filor::fil()$bib`"
csl: "`r filor::fil()$csl`"
toc: true
toc-title: Contents
toc-depth: 1
engine: knitr
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE,
                      dev = "svg",
                      fig.width = 7,
                      fig.asp = 0.618,
                      fig.align = "center",
                      comment = "#>")
```

```{r}
#| label: packages
#| include: false
library(gt)
library(ggplot2)
library(viridis)
devtools::load_all()
```

```{r}
#| label: ggplot2
#| include: false
mtheme <- function(size = 15){
  theme_minimal(base_size = size, 
                base_family = "sans") +
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5),
        strip.text = element_text(face = "bold"),
        panel.grid.minor = element_blank())
}

theme_set(mtheme())

# palettes
options(ggplot2.continuous.colour="viridis")
options(ggplot2.continuous.fill = "viridis")
scale_colour_discrete <- scale_colour_viridis_d
scale_fill_discrete <- scale_fill_viridis_d
```

```{r}
#| label: gt
#| include: false
qtab <- function(data, digits = 3){
  data |> 
    gt() |> 
    gt::cols_align(align = "center") |> 
    tab_style(
      style = cell_text(weight = "bold"),
      locations = cells_column_labels()
    ) |> 
    fmt_number(decimals = digits)
}
```

# Signal Detection Theory {.section}

## Signal Detection Theory (SDT)

- The SDT is a statistical approach to evaluate the ability of subject to **discriminate between signal and noise**.
- Can be used for perceptual decisions, psychophysics, eyewitnesses, diagnostic tools
- Whatever we have a binary decision for a *noisy* stimulus we can model the decision making using SDT

## SDT diagnostic example

We have $n = 100$ subjects where $50%$ have a certain condition and the rest are healthy. We want to test the ability of a clinician to detect the condition based on available information.

We summarise information using the variable `x` where patients are supposed to be higher compared to healthy people.

```{r}
ggnorm(c(0, 1), c(1,1))
```

## SDT diagnostic example

The distance between the distributions is the actual difference between people. The clinician need to (internally) decide where to put the vertical line to classify people.

```{r}
ggnorm(c(0, 1), c(1,1)) +
  geom_vline(xintercept = c(-1, 0, 2), lty = "dashed")
```

## SDT diagnostic example

When we collect data, we are not observing the `x` variable but the binary decision. The signal detection theory estimate the actual distance between latent distributions AND the decision threshold.

- The distance between distributions is called d$'$ (dprime)
- The decision threshold is called criterion

## SDT diagnostic example

```{r, echo = FALSE}
d <- 1.5

ggplot() +
  stat_function(fun = dnorm,
                aes(color = "Noise"),
                linewidth = 0.8) +
  stat_function(fun = dnorm, 
                aes(color = "Signal"),
                linewidth = 0.8,
                args = list(mean = 1.5, sd = 1)) +
  xlim(c(d/2 - 4.5, d/2 + 4.5)) +
  scale_color_manual(values = c("black", "red")) +
  geom_vline(xintercept = d/2, linetype = "dashed") +
  geom_segment(aes(x = 0, 
                   xend = d, 
                   y = dnorm(0, 0, 1)+0.01, 
                   yend = dnorm(d, d, 1)+0.01)) +
  geom_label(aes(x = d/2, y = dnorm(d, d, 1)+0.01),
             label = latex2exp::TeX("d$'$"),
             fill = "lightgreen",
             size = 5) +
  geom_vline(xintercept = d/2 + 2, linetype = "dashed") +
  geom_vline(xintercept = d/2 - 2, linetype = "dashed") +
  geom_point(aes(x = c(0, d), 
                 y = c(dnorm(0, 0, 1) + 0.01, 
                       dnorm(d, d, 1) + 0.01))) +
  theme(legend.position = c(0.9, 0.8),
        legend.title = element_blank(),
        axis.title.x = element_blank()) +
  ylab("Density")
```


## SDT diagnostic example

Let's see some data:

```{r}
#| echo: false
#| code-fold: false
dat <- sim_sdt(100, 1, 0) 
dat |> 
  filor::trim_df()
```

We have the `x` because these are simulated data but in real-world SDT we know the actual state `is_signal` and the response `say_signal`.

## SDT diagnostic example

Given that we know the truth (`is_signal`), we can tabulate the participant clinician responses:

```{r}
xtabs(~say_signal + is_signal, data = dat)
```

Within this table:

- `11` are called **HITS**
- `10` are called **MISS**
- `01` are called **FALSE ALARMS** (FA)
- `00` are called **CORRECT REJECTIONS** (CR)

## SDT diagnostic example

```{r}
#| echo: false
#| code-fold: false
sjPlot::tab_xtab(var.row = dat$is_signal, 
                 var.col = dat$say_signal, 
                 show.summary = FALSE,
                 show.cell.prc = TRUE)
```

## SDT diagnostic example

The main assumption of the (equal-variance) SDT is that signal and noise are normally distributed (at the latent level). Thus:

$$
d' = \Phi(pHIT) - \Phi(pFA)
$$

$$
c = \frac{\Phi(pHIT) + \Phi(pFA)}{2}
$$

To note, the criterion $c$ has different formulation while the equation above is the most common.

## SDT diagnostic example

We can use the `sdt` function to calculate the frequency and proportions:

```{r}
sdt_res <- sdt(dat$is_signal, dat$say_signal)
data.frame(sdt_res)
```

And the `psycho::dprime()` function to calculate the parameters:

```{r}
psycho::dprime(sdt_res$hit, sdt_res$fa, sdt_res$miss, sdt_res$cr)[c("dprime", "c")] |> 
  data.frame()
```

## SDT diagnostic example

The d$'$ is interpreted as the ability of the clinician to discriminate between healthy people and patients. The criterion is the tendency to say healthy or disease more frequently.

- **Conservative Criterion**: tendency to say no (positive $c$)
- **Liberal Criterion**: tendency to say yes (negative $c$)

Whatever the criterion, the best classification is associated with having an unbiased criterion. The perfect classification depends on the true d$'$. In a noisy decision (non complete separation between signal and noise), there is no strategy to achieve $pHIT = 1$ and $pFA = 0$.

## SDT diagnostic example

Assuming we are able to have access to `x`, we could try different $c$ to see which is the actual impact:

```{r}
#| echo: false
sdt_tab <- sdt(dat$is_signal, x = dat$x, c = seq(-3, 3, 0.01))
data.frame(sdt_tab) |> 
  ggplot(aes(x = c, y = phit)) +
  geom_line(lwd = 0.8,
            aes(color = "pHIT")) +
  geom_line(aes(y = 1 - pfa, color = "pFA"),
            lwd = 0.8) +
  theme(legend.title = element_blank(),
        axis.title.y = element_blank()) +
  xlab("Criterion")
```

## SDT diagnostic example

The standard binary accuracy within the SDT framework is just $(HIT + CR) / (HIT + CR + FA + MISS)$. Again the accuracy is maximized when the criterion is unbiased. In other terms, saying always "healthy" or "disease" is penalized.

```{r}
#| echo: false
sdt_tab$acc <- with(sdt_tab, (hit + cr)/(hit + cr + fa + miss)) 

sdt_tab |> 
  data.frame() |> 
  ggplot(aes(x = c, y = acc)) +
  geom_line() +
  ylab("Accuracy") +
  xlab("Criterion")
```

# Binomial GLM - Probit link and SDT {.section}

## Binomial GLM - Probit link and SDT

SDT parameters can easily be estimated within GLM framework [@DeCarlo1998-ay]. The `say_signal ~ is_signal` relationship is just a Binomial GLM with a probit (instead of the logit) link function.

## Binomial GLM - Probit link and SDT

We could manually calculate the d$'$ and criterion (instead of using the `psycho::dprime()` function) to better understand the process:

```{r}
# dprime
qnorm(sdt_res$phit) - qnorm(sdt_res$pfa)
# criterion, negative = tendency to say yes
-((qnorm(sdt_res$phit) + qnorm(sdt_res$pfa))/2)
```

## Binomial GLM - Probit link and SDT

Then we can fit GLM with a **probit** link predicting the response:

```{r}
fit <- glm(say_signal ~ is_signal, 
           contrasts = list(is_signal = -contr.sum(2)/2),
           data = dat, 
           family = binomial(link = "probit"))

# the intercept is the criterion
-coef(fit)[1] # flipping the sign is required for the different parametrization

# the slipe is the dprime
coef(fit)[2]
```

## Binomial GLM - Probit link and SDT

Why? 

Assuming a logit link, the $\beta_0$ is the logit transformation of the probability of the reference level. Here we are using `-0.5, 0.5` coding thus the logit transformation of the midpoint between signal and noise. This is the same as doing $c = \frac{\Phi(pHIT) + \Phi(pFA)}{2}$.

$\beta_1$ would be the log odds ratio between signal and noise. In this case is the difference between the two latent distributions assuming normality.

## References {.refs}

::: {#refs}
:::
