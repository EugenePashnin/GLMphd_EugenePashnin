---
title: "old-slides"
format: revealjs
---

# Data simulation `#extra` {.section}

## Data simulation `#extra`

- During the course we will try to simulate some data. Simulating data is an amazing education tool to understand a statistical model.
- By simulating from a **generative model** we are doing a so-called **Monte Carlo Simulations** [@Gentle2009-cj]

## Data simulation `#extra`

In R there are multiple functions to generate data from probability distributions:

```{r, echo = FALSE}
distr <- c(dnorm, dbinom)
args <- lapply(distr, formals)

distr <- c("norm", "pois", "binom")
what <- c(r = "Generate random numbers", 
          d = "Compute the density", 
          q = "Return the quantile given a cumulative proability",
          p = "Return the cumulative probability given a quantile")

distr_tab <- tidyr::expand_grid(distr, what)

distr_tab$fun <- sprintf("%s", names(distr_tab$what))
names(distr_tab) <- c("Distribution", "Action", "Function")

distr_tab |> 
    select(Function, Distribution, Action) |> 
    arrange(Function) |> 
    mytab() |> 
    collapse_rows(columns = c(1,3))
```

## Data simulation `#extra`

::: columns

:::: column
```{r, size = "tiny"}
n <- 1e5 # number of experiments
nt <- 100 # number of subjects
p <- 0.7 # probability of success
nc <- rbinom(n, nt, p)
```

```{r, echo = FALSE}
hist(nc/nt)
```
::::

:::: column
```{r, size = "tiny"}
n <- 1e5 # number of subjects
lambda <- 30 # mean/variance
y <- rpois(n, lambda)
```

```{r, echo = FALSE}
hist(y)
```
::::
:::

## Binomial GLM - Marginal effects

Marginal effects can be considered very similar to the **divide by 4 rule**. A particularly useful type of marginal effect is the **average marginal effect**. While the **divide by 4** rule estimate the **maximal** difference (in probability scale) according to $x$, the **average marginal effect** is the average of all slopes (i.e., derivatives) interpreted as the average change in probability scale across all unit increases in $x$.

```{r}
# calculate the derivative 
calc_deriv <- function(b0, b1, x){
    (b1 * exp(b0 + b1 * x)) / (1 + (exp(b0 + b1 * x)))^2
}

coefs <- coef(fit)
dd <- calc_deriv(coefs[1], coefs[2], dat$x)
mean(dd)
```

## Binomial GLM - Marginal effects

More efficiently we can do the same using the `margins` package in R:

```{r}
mrg <- margins::margins(fit)
summary(mrg)
```
