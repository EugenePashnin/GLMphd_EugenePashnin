{
  "hash": "4bbf7eb0294030fae005d1e59fbc32e2",
  "result": {
    "markdown": "---\ntitle: Signal Detection Theory and GLM\ninstitute: \"\\\\@event | Place\"\nauthor: \n  - name: \"Filippo Gambarota\"\n    email: filippo.gambarota@unipd.it\n    github: filippogambarota\nformat: \n  quarto-slides-revealjs:\n    slide-number: true\n    incremental: false\n    code-link: true\n    code-line-numbers: false\n    html-math-method: mathjax\n    margin: 0\n    filters:\n      - nutshell\n      - code-fullscreen\nfrom: markdown+emoji\ndate: last-modified\nfinal-slide: true\ndf-print: default\nbibliography: \"https://raw.githubusercontent.com/filippogambarota/bib-database/main/references.bib\"\ncsl: \"https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl\"\ntoc: true\ntoc-title: Contents\ntoc-depth: 1\nengine: knitr\n---\n\n\n\n\n\n\n\n\n\n\n## Monte Carlo Simulations\n\n> Monte Carlo methods, or Monte Carlo experiments, are a broad class of computational algorithms that rely on repeated random sampling to obtain numerical results. The underlying concept is to use randomness to solve problems that might be deterministic in principle\n\n## General Workflow {#mc-workflow}\n\nDespite the specific applications, Monte Carlo simulations follows a similar pattern:\n\n1. Define the **data generation process** (DGP)\n2. Use **random numbers sampling** to generate data according to **assumptions**\n3. Calculate a **statistics**, fit a **model** or do some **computations** on the generated data\n4. **Repeat** 2-3 several times (e.g., 10000)\n5. Get a **summary of the results**\n\n## Random numbers in R\n\nIn R there are several functions to generate random numbers and they are linked to specific probability distributions. You can type `?family()` to see available distributions for `glm`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n?family\n```\n:::\n\n\n## Random numbers in R\n\nIn fact, there are other useful distributions not listed in `?family()`, because they are not part of `glm`. For example the `beta` or the `unif` (uniform) distributions. Use `?Distributions` for a complete list:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n?Distributions\n```\n:::\n\n\n## Random numbers in R\n\nHowever, it is always possible to include other distributions with packages. For example the `MASS::mvrnorm()` implement the multivariate normal distribution or the `extraDistr::rhcauchy()` for a series of truncated distributions.\n\n## Random numbers in R\n\nThe general pattern is always the same. There are 4 functions called `r`, `p`, `q` and `d` combined with a distribution e.g. `norm` creating several utilities. For example, `rnorm()` generate number from a normal distribution.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- rnorm(1e3)\nhist(x)\n```\n\n::: {.cell-output-display}\n![](binomial-glm-power_files/figure-revealjs/unnamed-chunk-7-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n# Why Monte Carlo Simulations?\n\n## Why Monte Carlo Simulations?\n\nMonte Carlo simulations are used for several purposes:\n\n- Solve computations impossible or hard to do analytically\n- Estimate the statistical power, type-1 error, type-M error etc.\n\n## Example: standard error\n\nA classical example is estimating the standard error (SE) of a statistics. For example, we know that the SE of a sample mean is:\n\n$$\n\\sigma_\\overline x = \\frac{s_x}{\\sqrt{n_x}}\n$$\n\nWhere $s_x$ is the standard deviation of $x$ and $n_x$ is the sample size.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- rnorm(100, mean = 10, sd = 5)\nmean(x) # mean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 9.730939\n```\n:::\n\n```{.r .cell-code}\nsd(x) / sqrt(length(x)) # se\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.5096639\n```\n:::\n\n```{.r .cell-code}\n5 / sqrt(length(x)) # analytically, assuming s = 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.5\n```\n:::\n:::\n\n\n## Example: standard error\n\nHowever we are not good in deriving the SE analytically. We know that the SE is the standard deviation of the sampling distribution of a statistics.\n\n. . .\n\nThe sampling distribution is the distribution obtained by calculating the statistics (in this case the mean) on all possible (or a very big number) samples of size $n$.\n\n. . .\n\nWe can solve the problems creating a very simple Monte Carlo Simulation following the steps in slide [-@sec-mc-workflow]\n\n## Example: standard error\n\nWe simulate 10000 samples of size $n$ by a normal distribution with $\\mu = 10$ and $\\sigma = 5$. We calculate the mean $\\overline x$ for each iteration and then we calculate the standard deviation of the vectors of means.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnsim <- 1e4\nmx <- rep(0, 1e4)\n\nfor(i in 1:nsim){\n  x <- rnorm(100, 10, 5)\n  mx[i] <- mean(x)\n}\n\nhist(mx)\n```\n\n::: {.cell-output-display}\n![](binomial-glm-power_files/figure-revealjs/unnamed-chunk-9-1.svg){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nsd(mx) # the standard error\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.5020528\n```\n:::\n:::\n\n\n# Simulating GLM\n\n## Workflow\n\nThe general workflow is the following:\n\n1. Define the experimental design:\n    - how many variables?\n    - how many participants/trials?\n    - which type of variables (categorical, numerical)?\n2. Define the probability distribution of the response variable:\n    - Gaussian\n    - Poisson\n    - Binomial\n    - ...\n3. Create the model matrix and define all parameters of the simulation: $\\beta_0$, $\\beta_1$, $\\beta_2$, etc.\n4. Compute the linear predictors $\\eta$ on the link function scale\n5. Apply the inverse of the link function $g^{-1}(\\eta)$ obtaining values on the original scale\n6. Simulate the response variable by sampling from the appropriate distribution\n7. Fit the appropriate model and check the result\n8. In case of estimating statistical properties (e.g., power) repeat the simulation (1-7) several times (e.g., 10000) and summarize the results\n\n## Example with a linear model\n\nLet's simulate a simple linear model (i.e., GLM with a Gaussian random component and identity link function).\n\n$$\n\\hat y_i = \\beta_0 + \\beta_1x_i + \\epsilon_i\n$$\n\nIn this example we have:\n\n- 1 predictor $x$ that is numeric\n- 1 response variable $y$ that is numeric\n- 3 parameters: $\\beta_0$, $\\beta_1$ and $\\sigma_{\\epsilon}$\n- Gaussian random component and identity link function\n\n## Example with a linear model\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nn <- 100\nx <- rnorm(n)\n\ndat <- data.frame(x)\n\nX <- model.matrix(~x, data = dat)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   (Intercept)          x\n#> 1           1  0.5347115\n#> 2           1 -0.9740337\n#> 3           1 -1.5795100\n#> 4           1 -1.3320136\n#> 5           1  0.2890146\n#> 6           1  1.6968633\n```\n:::\n:::\n\n\n## Example with a linear model\n\nThen let's define the model parameters and compute the predicted values.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nb0 <- 0\nb1 <- 0.6\nsigma2 <- 1\n\ndat$lp <- b0 + b1*x\n\nplot(dat$x, dat$lp)\n```\n\n::: {.cell-output-display}\n![](binomial-glm-power_files/figure-revealjs/unnamed-chunk-11-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n## Example with a linear model\n\nNow, we are fitting a model with a Gaussian random component and an identity link function. Thus using the $g$ function has no effect. See the `#glm-tricks-1` about how to use the `family()` methods.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfam <- gaussian(link = \"identity\")\ndat$lp <- fam$linkinv(dat$lp)\ndat$y <- rnorm(nrow(dat), dat$lp, sqrt(sigma2))\nplot(dat$x, dat$y)\n```\n\n::: {.cell-output-display}\n![](binomial-glm-power_files/figure-revealjs/unnamed-chunk-12-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n## Example with a linear model\n\nNow we can fit the appropriate model using the `glm` function:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfit <- glm(y ~ x, family = gaussian(link = \"identity\"), data = dat)\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> Call:\n#> glm(formula = y ~ x, family = gaussian(link = \"identity\"), data = dat)\n#> \n#> Deviance Residuals: \n#>     Min       1Q   Median       3Q      Max  \n#> -2.4443  -0.5828   0.1325   0.5631   2.2872  \n#> \n#> Coefficients:\n#>             Estimate Std. Error t value Pr(>|t|)    \n#> (Intercept)  0.03886    0.09017   0.431    0.667    \n#> x            0.63523    0.08392   7.570 2.07e-11 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for gaussian family taken to be 0.8088145)\n#> \n#>     Null deviance: 125.611  on 99  degrees of freedom\n#> Residual deviance:  79.264  on 98  degrees of freedom\n#> AIC: 266.55\n#> \n#> Number of Fisher Scoring iterations: 2\n```\n:::\n:::\n\n\n## Example with a linear model\n\nA faster way, especially with many parameters is using matrix multiplication between the $X$ matrix and the vector of coefficients:\n\n$$\n\\boldsymbol{y} = \\begin{bmatrix}\n1 & x_{1} \\\\\n1 & x_{2} \\\\\n1 & x_{3} \\\\\n1 & x_{4} \\\\\n\\vdots & x_n\n\\end{bmatrix}\n\\begin{bmatrix}\n\\beta_0 \\\\\n\\beta_1\n\\end{bmatrix} \n+\n\\begin{bmatrix}\n\\epsilon_1 \\\\\n\\epsilon_2 \\\\\n\\epsilon_3 \\\\\n\\vdots \\\\\n\\epsilon_n\n\\end{bmatrix}\n$$\n## Example with a linear model\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nB <- c(b0, b1)\ny <- X %*% B + rnorm(nrow(dat), 0, sqrt(sigma2))\nplot(dat$x, y)\n```\n\n::: {.cell-output-display}\n![](binomial-glm-power_files/figure-revealjs/unnamed-chunk-14-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n## Example with a linear model\n\nNow let's add another effect, for example a binary variable `group`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngroup <- c(\"a\", \"b\")\nx <- rnorm(n*2)\n\ndat <- data.frame(\n  x = x,\n  group = rep(group, each = n)\n)\n\nX <- model.matrix(~ group + x, data = dat)\nhead(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   (Intercept) groupb          x\n#> 1           1      0  0.3026874\n#> 2           1      0 -0.8250273\n#> 3           1      0 -0.6346112\n#> 4           1      0 -0.7991411\n#> 5           1      0  0.9297599\n#> 6           1      0  1.5238188\n```\n:::\n:::\n\n\n## Example with a linear model\n\nNow the model matrix has another column `groupb` that is the dummy-coded version of the `group` variable. Now let's set the parameters:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nb0 <- 0 # y value when group = \"a\" and x = 0 \nb1 <- 1 # difference between groups\nb2 <- 0.6 # slope of the group\nsigma2 <- 1 # residual variance\n```\n:::\n\n\nThen we can compute the formula adding the new parameters:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat$y <- b0 + b1 * ifelse(dat$group == \"a\", 0, 1) + b2 * dat$x + rnorm(nrow(dat), 0, sqrt(sigma2))\n\ndat |> \n  ggplot(aes(x = x, y = y, color = group)) +\n  geom_point() +\n  geom_smooth(method = \"lm\",\n              formula = y ~ x,\n              se = FALSE)\n```\n\n::: {.cell-output-display}\n![](binomial-glm-power_files/figure-revealjs/unnamed-chunk-17-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n## Example with a linear model\n\nThe same using matrix formulation:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nB <- c(b0, b1, b2)\ndat$y <- X %*% B + rnorm(nrow(dat), 0, sqrt(sigma2))\n```\n:::\n\n\nThen we can fit the model:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfit <- lm(y ~ group + x, data = dat)\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> Call:\n#> lm(formula = y ~ group + x, data = dat)\n#> \n#> Residuals:\n#>      Min       1Q   Median       3Q      Max \n#> -2.44156 -0.64662  0.00562  0.54363  2.25686 \n#> \n#> Coefficients:\n#>             Estimate Std. Error t value Pr(>|t|)    \n#> (Intercept) 0.009116   0.103947   0.088     0.93    \n#> groupb      1.025829   0.146981   6.979 4.42e-11 ***\n#> x           0.570706   0.074628   7.647 8.85e-13 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 1.039 on 197 degrees of freedom\n#> Multiple R-squared:  0.355,\tAdjusted R-squared:  0.3484 \n#> F-statistic: 54.21 on 2 and 197 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n\n# Generalized Linear Models\n\n## Generalized Linear Models\n\nThe workflow presented before can be applied to GLMs. The only extra steps is performing the **link-function** transformation.\n\nWe simulate data fixing coefficients and computing $\\eta$, then we apply the inverse of the link function (4 and 5 from the workflow slide).\n\n## GLM example\n\nLet's simulate the effect of a continuous predictor on the probability of success, thus using a Binomial model.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nns <- 100 # sample size\nx <- runif(ns) # x predictor\nb0 <- qlogis(0.001) # probability of correct response when x is 0\nb1 <- 10 # increase in the logit of a correct response by unit increase in x\n\ndat <- data.frame(id = 1:ns, x = x)\nhead(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   id         x\n#> 1  1 0.9621556\n#> 2  2 0.4033242\n#> 3  3 0.3738179\n#> 4  4 0.1502386\n#> 5  5 0.5476731\n#> 6  6 0.8989439\n```\n:::\n:::\n\n\n## GLM example\n\nLet's compute the $\\eta$ by doing the linear combination of predictors and coefficients:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat$lp <- b0 + b1 * dat$x\nggplot(dat, aes(x = x, y = lp)) +\n  geom_line() +\n  ylab(latex(\"\\\\eta\")) +\n  xlab(\"x\")\n```\n\n::: {.cell-output-display}\n![](binomial-glm-power_files/figure-revealjs/unnamed-chunk-21-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n## GLM example\n\nThen we can compute $g^{-1}(\\eta)$ applying the inverse of the link function. Let's use the **logit**:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfam <- binomial(link = \"logit\")\ndat$p <- fam$linkinv(dat$lp)\nggplot(dat, aes(x = x, y = p)) +\n  geom_line() +\n  ylim(c(0, 1)) +\n  ylab(latex(\"p\")) +\n  xlab(\"x\")\n```\n\n::: {.cell-output-display}\n![](binomial-glm-power_files/figure-revealjs/unnamed-chunk-22-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n## GLM example\n\nSo far we have the expected probability of success for each participant and $x$, but we need to include the random component. We can use $p$ or $g^{-1}(\\eta)$ more generally to sample from the $\\mu$ parameter of the probability distribution.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat$y <- rbinom(n = nrow(dat), size = 1, prob = dat$p)\nhead(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   id         x        lp           p y\n#> 1  1 0.9621556  2.714802 0.937894418 1\n#> 2  2 0.4033242 -2.873512 0.053478583 0\n#> 3  3 0.3738179 -3.168576 0.040365555 0\n#> 4  4 0.1502386 -5.404369 0.004476761 0\n#> 5  5 0.5476731 -1.430024 0.193094920 0\n#> 6  6 0.8989439  2.082684 0.889208771 1\n```\n:::\n:::\n\n\n## GLM example\n\nNow we have simulated a vector of responses with the appropriate random component. We can plot the results.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat |> \n  ggplot(aes(x = x, y = y)) +\n  geom_point(position = position_jitter(height = 0.05)) +\n  stat_smooth(method = \"glm\", \n              method.args = list(family = fam),\n              se = FALSE)\n```\n\n::: {.cell-output-display}\n![](binomial-glm-power_files/figure-revealjs/unnamed-chunk-24-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n## GLM example\n\nFinally we can fit the model and see if the parameters are estimated correctly. Of course, we know the true data generation process thus we are fitting the best model.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfit <- glm(y ~ x, data = dat, family = fam)\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> Call:\n#> glm(formula = y ~ x, family = fam, data = dat)\n#> \n#> Deviance Residuals: \n#>     Min       1Q   Median       3Q      Max  \n#> -2.3013  -0.4078  -0.1025   0.3413   1.9190  \n#> \n#> Coefficients:\n#>             Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept)   -7.201      1.534  -4.696 2.66e-06 ***\n#> x             10.295      2.247   4.583 4.59e-06 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for binomial family taken to be 1)\n#> \n#>     Null deviance: 116.652  on 99  degrees of freedom\n#> Residual deviance:  59.462  on 98  degrees of freedom\n#> AIC: 63.462\n#> \n#> Number of Fisher Scoring iterations: 6\n```\n:::\n:::\n\n\n# Power analysis\n\n## Power analysis\n\nOnce the data generation process and the model has been defined, the power analysis is straightforward.\n\nThe hardest part is fixing plausible values according to your knowledge and/or previous literature.\n\nFor example, there are methods to convert from odds ratio to Cohen's $d$ or other metrics.\n\nThe `effectsize` package is a great resource to understand and compute effect sizes.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nor <- 1.5 # odds ratio\neffectsize::oddsratio_to_d(or)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.2235446\n```\n:::\n:::\n\n\n## Power analysis\n\nWe can see the relationship between $d$ and (log) Odds Ratio:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](binomial-glm-power_files/figure-revealjs/unnamed-chunk-27-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n## Power analysis\n\nFor example we can simulate the same model as before but fixing the effect size to be $d = 0.5$.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nd <- 0.5\nor <- effectsize::d_to_oddsratio(d) # this is beta1\ndat$lp <- qlogis(0.001) + log(or) * dat$x\ndat$y <- rbinom(nrow(dat), 1, plogis(dat$lp))\n\nhead(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   id         x        lp           p y\n#> 1  1 0.9621556 -6.034176 0.937894418 0\n#> 2  2 0.4033242 -6.540980 0.053478583 0\n#> 3  3 0.3738179 -6.567739 0.040365555 0\n#> 4  4 0.1502386 -6.770503 0.004476761 0\n#> 5  5 0.5476731 -6.410070 0.193094920 0\n#> 6  6 0.8989439 -6.091503 0.889208771 0\n```\n:::\n:::\n\n\n## Power analysis\n\nClearly, we need to repeat the sampling process several times, store the results (e.g., the p-value of $\\beta_1$) and then compute the power.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnsim <- 1000\np <- rep(0, nsim)\n\nfor(i in 1:nsim){\n  dat$y <- rbinom(nrow(dat), 1, plogis(dat$lp))\n  fit <- glm(y ~ x, data = dat, family = fam)\n  p[i] <- summary(fit)$coefficients[\"x\", \"Pr(>|z|)\"]\n}\n\nmean(p <= 0.05)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0\n```\n:::\n:::\n\n\n## Power analysis\n\nWith just one condition the power analysis is not really meaningful. We can compute the same for different sample sizes. Here my code is using a series of `for` loops but there could be a nicer implementation.\n\n\n::: {.cell layout-align=\"center\" hash='binomial-glm-power_cache/revealjs/unnamed-chunk-30_99ec2152a8225d976c74c945be82131e'}\n\n```{.r .cell-code}\nns <- c(30, 50, 100, 150)\n\npower <- rep(0, length(ns))\n\nfor(i in 1:length(ns)){\n  p <- rep(0, nsim)\n  for(j in 1:nsim){\n    dat <- data.frame(id = 1:ns[i], x = runif(ns[i]))\n    dat$y <- rbinom(nrow(dat), 1, plogis(qlogis(0.001) + 6 * dat$x))\n    fit <- glm(y ~ x, data = dat, family = fam)\n    p[j] <- summary(fit)$coefficients[\"x\", \"Pr(>|z|)\"]\n  }\n  power[[i]] <- mean(p <= 0.05)\n}\n```\n:::\n\n\n## Power analysis\n\nThen we can compute the results:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(ns, power, type = \"b\", ylim = c(0, 1), pch = 19)\n```\n\n::: {.cell-output-display}\n![](binomial-glm-power_files/figure-revealjs/unnamed-chunk-31-1.svg){fig-align='center' width=672}\n:::\n:::\n\n\n# Random-effects\n\n## Random-effects\n\nIn the course we did not introduced the random-effects model but in this section I want to give you an idea about how to simulate the random-effects (intercepts and slopes).\n\nWe need to simulate a multilevel dataset with participants doing a certain number of trials. Then we have a trial-level variable $x$ simulated using fixed and random slopes.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nns <- 100 # number of subjects\nnt <- 100 # number of trials\nvb0 <- 0.5 # random-intercepts variance\nsigma2 <- 0.5 # residual variance\nicc <- vb0 / (vb0 + sigma2) # intraclass correlation\n\ndat <- expand.grid(id = 1:ns, nt = 1:nt)\ndat$x <- rnorm(nrow(dat))\n```\n:::\n\n\n## Random-effects\n\nFor now is the same as before. But we have multiple line for the same participant `id` thus observations are not independent. We have a random-intercept model where each subject have a specific intercept.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nb0 <- 0\nb1 <- 0.6\nb0i <- rnorm(ns, 0, sqrt(vb0))\ndata.frame(id = 1:ns, b0i) |> \n  filor::trim_df()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>    id    b0i\n#> 1   1 -0.475\n#> 2   2  0.255\n#> 3   3  0.413\n#> 4   4 -0.151\n#> 5 ...    ...\n#> 6  97 -1.376\n#> 7  98 -1.401\n#> 8  99  1.427\n#> 9 100 -0.352\n```\n:::\n:::\n\n\n## Random-effects\n\n<!-- TODO put the model equation here -->\n\nNow we do the same as before but adding the by-subject intercept into the model formula.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat$y <- with(dat, b0 + b0i[id] + b1 * x)\n\ndat |> \n  ggplot(aes(x = x, y = y, group = id)) +\n  stat_smooth(method = \"lm\", se = FALSE, alpha = 0.7, geom = \"line\")\n```\n\n::: {.cell-output-display}\n![](binomial-glm-power_files/figure-revealjs/unnamed-chunk-34-1.svg){fig-align='center' width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}